XMLHttpRequest 5 readyStates - 
        0	UNSENT	Client has been created. open() not called yet.
        1	OPENED	open() has been called.
        2	HEADERS_RECEIVED	send() has been called, and headers and status are available.
        3	LOADING	Downloading; responseText holds partial data.
        4	DONE	The operation is complete.
        
Immutable/mutable javascript types.
        A mutable object is an object whose state can be modified after it is created. An immutable object is an object whose state cannot be modified after it is created. Examples of native JavaScript values that are immutable are numbers and strings. Examples of native JavaScript values that are mutable include objects, arrays, functions, classes, sets, and maps.
What we see is that for mutable values, updating state applies across all references to that variable. So changing a value in one place, changes it for all references to that object. For the immutable data types, we have no way of changing the internal state of the data, so the reference always gets reassigned to a new object. The biggest implication of this is that for immutable data, equality is more reliable since we know that a value’s state won’t be changed out from under us.

Default JS data type of var str = "string"
Preflight request - headers matching check.

call, apply, bind in Javascript
Mixins in javascript ==> achieving multiple inheritance.
Prototype in Javascript.
Promise/callback in javascript
Constructors in javascript.
Closures
Angular/Backbone MVC or MVVM, Why Angular -->
this in javascript
Hoisting in Javascript
How to clear arrays in javascript.
Drawback of private methods in Javascript.
is null object in Javascript.
objectA = objectB, what is result of objectA.objectBvariable? both same to same reference.
use strict mode in Javascript.
Design patterns in Javascript.
How to pass Array as pass by value to function? yourArray.slice(0) will pass copy not reference of array.

ECMA6 (June 2015)
classes in javascript
Arrow functions

Promises

async - Async keyword makes any function to return only promises.
await - Await can be used only inside async function. It doesn’t work outside async function

What datatypes are supported in Javascript?
Undefined
Number
String
Boolean
Object
Function
Null

Explain the meaning of  the keyword ‘this’ in JavaScript functions
The keyword ‘this’ in JavaScript refers to the object that a function is a method of. If it’s not specified, it will default to the global object, the window.
In the example below, you can see that ‘this’ refers to the box object when it is applied to the width function. When no object is passed in, 
it will default to the browser window.

CSS
---

Pseduo Classes in CSS.
after and before in CSS.
Attribute selector in CSS.
What is Mixins in LESS.
float left in Bootstrap --> pull-left.
3 same classes having difference color in each class, which color will apply to element when all classes are added to element.
CSS inline, id, class priority order.

Array Map - Map operator is used to do a specific operation on all elements of an array and it returns an array with modified elements.
let arr = [1,2,3,4,5];
let modifiedArr = arr.map(function(element, index, arr) {
  return element * 10;
});
console.log(modifiedArr);
Output:
[10, 20, 30, 40, 50]

Array filter is used to filter the whole array based on some condition. Array filter takes each element of an array and checks with the given condition. If the element passes the condition it keeps the element in the array else it removes the element.

let arr = [1, 2, 3, 4, 5, 6]
let modifiedArr = arr.filter(function(element, index, array) {
  return element % 2 == 0
});
console.log(modifiedArr);
Output:
[2, 4, 6]
let modifiedAarr = arr.filter((element, index) => element%2 == 0)

Array reduce is used to aggregate all the elements of an array and return a single value.
let arr = [1,2,3,4,5,6]
let total= arr.reduce(function(sum, element, index, array) {
  return sum + element;
},0);
console.log("total is "+total);
Output:
total is 21

The first parameter is the aggregator element. It has the sum of elements at any given point. And it’s initial value is defined as the additional element. In our case it’s 0.

